import tkinter as tk
import random
from PIL import Image, ImageTk
import itertools
from tkinter import simpledialog

# –°—Ç–≤–æ—Ä—é—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –≤—ñ–∫–Ω–æ –≥—Ä–∏
root = tk.Tk()
root.title("Diceee!")
root.state('zoomed')  # –†–æ–∑–≥–æ—Ä—Ç–∞—î–º–æ –≤—ñ–∫–Ω–æ –Ω–∞ –≤–µ—Å—å –µ–∫—Ä–∞–Ω
root.configure(bg="#1e1e1e")  # –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ —Ç–µ–º–Ω–∏–π —Ñ–æ–Ω

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —Ç–∞ –ø—ñ–¥–≥–∞–Ω—è—î–º–æ —Ñ–æ–Ω-–¥–æ—à–∫—É –ø—ñ–¥ —Ä–æ–∑–º—ñ—Ä –µ–∫—Ä–∞–Ω—É
board_image = Image.open("board_bg.png")
screen_width = root.winfo_screenwidth()
screen_height = root.winfo_screenheight()
board_image = board_image.resize((screen_width, screen_height), Image.Resampling.LANCZOS)
board_photo = ImageTk.PhotoImage(board_image)

# –§–æ–Ω–æ–≤–∏–π –ª–µ–π–±–ª –∑ –∫–∞—Ä—Ç–∏–Ω–∫–æ—é, —è–∫–∏–π –∑–∞–π–º–∞—î –≤—Å–µ –≤—ñ–∫–Ω–æ
background_label = tk.Label(root, image=board_photo)
background_label.place(x=0, y=0, relwidth=1, relheight=1)

# –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—É–±–∏–∫—ñ–≤ 1-6, —Ä–æ–∑–º—ñ—Ä 300x300 –ø—ñ–∫—Å–µ–ª—ñ–≤
dice_images = [ImageTk.PhotoImage(Image.open(f"dice{i}.png").resize((300, 300))) for i in range(1, 7)]

# Available jersey colors for football teams
JERSEY_COLORS = {
    "Red": "#ff0000",
    "Blue": "#0000ff",
    "Green": "#00ff00",
    "Yellow": "#ffff00",
    "White": "#ffffff",
    "Black": "#000000",
    "Orange": "#ffa500",
    "Purple": "#800080"
}

# –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è —Å—Ç–∏–ª—ñ–∑–æ–≤–∞–Ω–∏—Ö –∫–Ω–æ–ø–æ–∫ –∑ –æ–¥–Ω–∞–∫–æ–≤–∏–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
def styled_button(master, text, command=None, bg="#3a3f4b", fg="white", font_size=14, width=20, height=2):
    return tk.Button(
        master,
        text=text,
        font=("Arial", font_size, "bold"),
        command=command,
        bg=bg,
        fg=fg,
        activebackground="#555",
        activeforeground="white",
        bd=0,
        relief="flat",
        highlightthickness=0,
        padx=10,
        pady=10,
        width=width,
        height=height
    )

# –ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –≥—Ä–∏ –∑ –¥–≤–æ–º–∞ –∫–Ω–æ–ø–∫–∞–º–∏ —Ä–µ–∂–∏–º—ñ–≤
def show_main_menu():
    # –û—á–∏—â–∞—î–º–æ –≤—ñ–∫–Ω–æ –≤—ñ–¥ –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤—ñ–¥–∂–µ—Ç—ñ–≤
    for widget in root.winfo_children():
        widget.destroy()

    # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ —Ñ–æ–Ω
    background_label = tk.Label(root, image=board_photo)
    background_label.place(x=0, y=0, relwidth=1, relheight=1)

    # –ó–∞–≥–æ–ª–æ–≤–æ–∫ –≥—Ä–∏
    title = tk.Label(root, text="Diceee!", font=("Comic Sans MS", 36, "bold"), bg="#1e1e1e", fg="#FFD700")
    title.place(relx=0.98, rely=0.05, anchor="ne")

    # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–æ–∫
    btn_frame = tk.Frame(root, bg="#1e1e1e")
    btn_frame.place(relx=0.5, rely=0.5, anchor="center")

    # –ö–Ω–æ–ø–∫–∞ –∫–ª–∞—Å–∏—á–Ω–æ—ó –≥—Ä–∏
    btn_classic = styled_button(btn_frame, "–ö–ª–∞—Å–∏—á–Ω–∞ –≥—Ä–∞", command=start_classic_mode, bg="#4CAF50", font_size=20, width=25, height=2)
    btn_classic.pack(pady=15)

    # –ö–Ω–æ–ø–∫–∞ —Ñ—É—Ç–±–æ–ª—å–Ω–æ–≥–æ —Ç—É—Ä–Ω—ñ—Ä—É
    btn_football = styled_button(btn_frame, "–§—É—Ç–±–æ–ª—å–Ω–∏–π —Ç—É—Ä–Ω—ñ—Ä", command=start_football_mode, bg="#2196F3", font_size=20, width=25, height=2)
    btn_football.pack(pady=15)

# –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" —É —Ä–µ–∂–∏–º–∞—Ö, —â–æ–± –ø–æ–≤–µ—Ä–Ω—É—Ç–∏—Å—å –¥–æ –≥–æ–ª–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
def create_back_button(parent):
    back_btn = styled_button(parent, "‚üµ –ù–∞–∑–∞–¥", command=show_main_menu, bg="#f44336", font_size=14, width=10, height=1)
    back_btn.place(relx=0.98, rely=0.05, anchor="ne")
    return back_btn

# –ö–ª–∞—Å–∏—á–Ω–∏–π —Ä–µ–∂–∏–º –≥—Ä–∏
def start_classic_mode():
    # –û—á–∏—â–∞—î–º–æ –≤—ñ–∫–Ω–æ
    for widget in root.winfo_children():
        widget.destroy()

    # –ü–æ—á–∞—Ç–∫–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ: —Ä–∞—Ö—É–Ω–æ–∫, —Ö—Ç–æ —Ö–æ–¥–∏—Ç—å, –∞–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å –≥—Ä–∏
    player1_score = 0
    player2_score = 0
    turn = 1
    game_active = True

    # –°—Ç–≤–æ—Ä—é—î–º–æ –¥–≤—ñ —á–∞—Å—Ç–∏–Ω–∏ –≤—ñ–∫–Ω–∞: –ª—ñ–≤–∞ - –¥–ª—è –∫—É–±–∏–∫–∞, –ø—Ä–∞–≤–∞ - –¥–ª—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó
    left_frame = tk.Frame(root, bg="#1e1e1e")
    left_frame.pack(side=tk.LEFT, padx=50, pady=50, expand=True, fill=tk.BOTH)

    right_frame = tk.Frame(root, width=250, bg="#1e1e1e")
    right_frame.pack_propagate(False)
    right_frame.pack(side=tk.RIGHT, padx=50, pady=50, fill=tk.Y)

    # –î–æ–¥–∞—î–º–æ –∫–Ω–æ–ø–∫—É –Ω–∞–∑–∞–¥ —É –≤–µ—Ä—Ö–Ω—ñ–π –ø—Ä–∞–≤–∏–π –∫—É—Ç
    create_back_button(root)

    # –í—ñ–¥–∂–µ—Ç –¥–ª—è –ø–æ–∫–∞–∑—É –∫—É–±–∏–∫–∞, –ø–æ—á–∞—Ç–∫–æ–≤–æ 1
    dice_label = tk.Label(left_frame, image=dice_images[0], bg="#1e1e1e")
    dice_label.pack(expand=True) 

    # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∞ –ø–∞–Ω–µ–ª—å –∑ —Ä–∞—Ö—É–Ω–∫–∞–º–∏ —Ç–∞ —Å—Ç–∞—Ç—É—Å–æ–º —Ö–æ–¥—É
    info_frame = tk.Frame(right_frame, bg="#1e1e1e")
    info_frame.place(relx=0.5, rely=0.15, anchor="n")

    # Highlight current player
    player1_label = tk.Label(info_frame, text="–ì—Ä–∞–≤–µ—Ü—å 1: 0", font=("Arial", 16), bg="#1e1e1e", fg="white")
    player1_label.pack(pady=8)

    player2_label = tk.Label(info_frame, text="–ì—Ä–∞–≤–µ—Ü—å 2: 0", font=("Arial", 16), bg="#1e1e1e", fg="white")
    player2_label.pack(pady=8)

    status_label = tk.Label(info_frame, text="–•—ñ–¥ –≥—Ä–∞–≤—Ü—è 1", font=("Arial", 16, "bold"), bg="#1e1e1e", fg="#FFD700")
    status_label.pack(pady=20)

    def update_player_highlight():
        if turn == 1:
            player1_label.config(bg="#333333")
            player2_label.config(bg="#1e1e1e")
        else:
            player1_label.config(bg="#1e1e1e")
            player2_label.config(bg="#333333")

    update_player_highlight()

    # –ö–∞–Ω–≤–∞—Å ‚Äî —Ü–µ –∫–Ω–æ–ø–∫–∞ —É –≤–∏–≥–ª—è–¥—ñ –∫–æ–ª–∞ –∑ –Ω–∞–ø–∏—Å–æ–º "–ö–∏–Ω—É—Ç–∏"
    canvas = tk.Canvas(right_frame, width=120, height=120, highlightthickness=0, bg="#1e1e1e")
    canvas.place(relx=0.5, rely=0.7, anchor="center")

    circle = canvas.create_oval(0, 0, 120, 120, fill="#4CAF50", outline="#4CAF50")
    circle_text = canvas.create_text(60, 60, text="–ö–∏–Ω—É—Ç–∏", fill="white", font=("Arial", 14, "bold"))

    rematch_btn = None  # –ö–Ω–æ–ø–∫–∞ "–†–µ–≤–∞–Ω—à" –∑'—è–≤–∏—Ç—å—Å—è –ø–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—é –≥—Ä–∏

    # –ê–Ω—ñ–º–∞—Ü—ñ—è –∫—É–±–∏–∫–∞ ‚Äî —à–≤–∏–¥–∫–µ –ø–µ—Ä–µ–º–∏–∫–∞–Ω–Ω—è –∑–æ–±—Ä–∞–∂–µ–Ω—å –∫—É–±–∏–∫–∞, —â–æ–± —Å—Ç–≤–æ—Ä–∏—Ç–∏ –µ—Ñ–µ–∫—Ç –æ–±–µ—Ä—Ç–∞–Ω–Ω—è
    def animate_dice(callback):
        frames = itertools.cycle(dice_images)
        count = 0
        def update_frame():
            nonlocal count
            dice_label.config(image=next(frames))
            count += 1
            if count < 8:
                root.after(30, update_frame)
            else:
                callback()
        update_frame()

    # –ö–æ–ª–∏ –≥—Ä–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å: –≤—ñ–¥–∫–ª—é—á–∞—î–º–æ –∫–Ω–æ–ø–∫—É, –ø–æ–∫–∞–∑—É—î–º–æ "–†–µ–≤–∞–Ω—à"
    def finish_game():
        nonlocal game_active, rematch_btn
        game_active = False
        canvas.itemconfig(circle_text, state='hidden')
        canvas.itemconfig(circle, fill="#555")  # –ó–º—ñ–Ω—é—î–º–æ –∫–æ–ª—ñ—Ä –∫–Ω–æ–ø–∫–∏, —â–æ–± –ø–æ–∫–∞–∑–∞—Ç–∏, —â–æ –≤–æ–Ω–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞

        rematch_btn = styled_button(right_frame, "–†–µ–≤–∞–Ω—à", restart_classic, bg="#607d8b", font_size=14, width=15, height=2)
        rematch_btn.place(relx=0.5, rely=0.85, anchor="center")

    # –ü–æ—á–∏–Ω–∞—î–º–æ –≥—Ä—É –∑–∞–Ω–æ–≤–æ, –≤–∏–∫–ª–∏–∫–∞—é—á–∏ —Ñ—É–Ω–∫—Ü—ñ—é —Å—Ç–∞—Ä—Ç—É –∫–ª–∞—Å–∏—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º—É
    def restart_classic():
        nonlocal rematch_btn
        if rematch_btn:
            rematch_btn.destroy()
        start_classic_mode()

    # –û—Å–Ω–æ–≤–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è, —â–æ –≤–∏–∫–æ–Ω—É—î—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—ñ –∫–Ω–æ–ø–∫–∏ "–ö–∏–Ω—É—Ç–∏"
    def roll_dice():
        nonlocal player1_score, player2_score, turn, game_active
        if not game_active:
            return
        canvas.itemconfig(circle_text, state='hidden')  # –•–æ–≤–∞—î–º–æ —Ç–µ–∫—Å—Ç –ø—ñ–¥ —á–∞—Å –∞–Ω—ñ–º–∞—Ü—ñ—ó

        # –ü—ñ—Å–ª—è –∞–Ω—ñ–º–∞—Ü—ñ—ó –∑–∞–ø—É—Å–∫–∞—î–º–æ —Ñ—É–Ω–∫—Ü—ñ—é, —è–∫–∞ –¥–æ–¥–∞—î —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ —Ä–∞—Ö—É–Ω–∫—É
        def apply_result():
            nonlocal player1_score, player2_score, turn, game_active
            roll = random.randint(1, 6)
            dice_label.config(image=dice_images[roll - 1])  # –ü–æ–∫–∞–∑—É—î–º–æ –≤–∏–ø–∞–≤—à–∏–π –∫—É–±–∏–∫

            # –î–æ–¥–∞—î–º–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –¥–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –≥—Ä–∞–≤—Ü—è
            if turn == 1:
                player1_score += roll
                player1_label.config(text=f"–ì—Ä–∞–≤–µ—Ü—å 1: {player1_score}")
                turn = 2
                status_label.config(text="–•—ñ–¥ –≥—Ä–∞–≤—Ü—è 2")
            else:
                player2_score += roll
                player2_label.config(text=f"–ì—Ä–∞–≤–µ—Ü—å 2: {player2_score}")
                turn = 1
                status_label.config(text="–•—ñ–¥ –≥—Ä–∞–≤—Ü—è 1")

            update_player_highlight()

            # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –Ω–∞ –ø–µ—Ä–µ–º–æ–≥—É (—Ö—Ç–æ –ø–µ—Ä—à–∏–º –Ω–∞–±—Ä–∞–≤ >=30)
            if player1_score >= 30 or player2_score >= 30:
                winner = "1" if player1_score >= 30 else "2"
                status_label.config(text=f"üéâ –ì—Ä–∞–≤–µ—Ü—å {winner} –ø–µ—Ä–µ–º—ñ–≥!")
                finish_game()
            else:
                canvas.itemconfig(circle_text, state='normal')  # –í—ñ–¥–Ω–æ–≤–ª—é—î–º–æ –∫–Ω–æ–ø–∫—É –¥–ª—è –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Ö–æ–¥—É

        animate_dice(apply_result)

    # –ü—Ä–∏–≤'—è–∑–∫–∞ –∫–ª—ñ–∫—É –º–∏—à—ñ –¥–æ –∫–Ω–æ–ø–∫–∏ "–ö–∏–Ω—É—Ç–∏"
    canvas.bind("<Button-1>", lambda e: roll_dice())

# –§—É—Ç–±–æ–ª—å–Ω–∏–π —Ç—É—Ä–Ω—ñ—Ä ‚Äî –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞ –∫–ª–∞—Å–∏—á–Ω—ñ–π –≥—Ä—ñ –∑ –¥–≤–æ–º–∞ –∫–æ–º–∞–Ω–¥–∞–º–∏ —Ç–∞ –ø—ñ–¥—Ä–∞—Ö—É–Ω–∫–æ–º –æ—á–æ–∫
def start_football_mode():
    # –û—á–∏—â–∞—î–º–æ –≤—ñ–∫–Ω–æ
    for widget in root.winfo_children():
        widget.destroy()

    create_back_button(root)

    # Ask for team names and colors
    team1_name = simpledialog.askstring("–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –ø–µ—Ä—à–æ—ó –∫–æ–º–∞–Ω–¥–∏:", parent=root)
    if team1_name is None or team1_name.strip() == "":
        team1_name = "–ö–æ–º–∞–Ω–¥–∞ –ê"
    
    team2_name = simpledialog.askstring("–ù–∞–∑–≤–∞ –∫–æ–º–∞–Ω–¥–∏", "–í–≤–µ–¥—ñ—Ç—å –Ω–∞–∑–≤—É –¥—Ä—É–≥–æ—ó –∫–æ–º–∞–Ω–¥–∏:", parent=root)
    if team2_name is None or team2_name.strip() == "":
        team2_name = "–ö–æ–º–∞–Ω–¥–∞ –ë"
    
    # Select colors for teams
    color_window = tk.Toplevel(root)
    color_window.title("–í–∏–±—ñ—Ä –∫–æ–ª—å–æ—Ä—ñ–≤ —Ñ–æ—Ä–º")
    color_window.geometry("400x200")
    color_window.resizable(False, False)
    color_window.grab_set()
    
    tk.Label(color_window, text="–í–∏–±–µ—Ä—ñ—Ç—å –∫–æ–ª—ñ—Ä —Ñ–æ—Ä–º–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏", font=("Arial", 12)).pack(pady=10)
    
    team1_color = tk.StringVar(value="Red")
    team2_color = tk.StringVar(value="Blue")
    
    color_frame = tk.Frame(color_window)
    color_frame.pack(pady=10)
    
    tk.Label(color_frame, text=f"{team1_name}:").grid(row=0, column=0, padx=5)
    team1_menu = tk.OptionMenu(color_frame, team1_color, *JERSEY_COLORS.keys())
    team1_menu.grid(row=0, column=1, padx=5)
    
    tk.Label(color_frame, text=f"{team2_name}:").grid(row=1, column=0, padx=5)
    team2_menu = tk.OptionMenu(color_frame, team2_color, *JERSEY_COLORS.keys())
    team2_menu.grid(row=1, column=1, padx=5)
    
    def confirm_colors():
        color_window.destroy()
        start_football_game(team1_name, team2_name, team1_color.get(), team2_color.get())
    
    tk.Button(color_window, text="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", command=confirm_colors).pack(pady=10)

def start_football_game(team1_name, team2_name, team1_color, team2_color):
    # –ó–º—ñ–Ω–Ω—ñ –¥–ª—è –≥—Ä–∏
    teams = [team1_name, team2_name]  # –ù–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥
    team_colors = [JERSEY_COLORS[team1_color], JERSEY_COLORS[team2_color]]  # –ö–æ–ª—å–æ—Ä–∏ –∫–æ–º–∞–Ω–¥
    team_scores = [0, 0]  # –†–∞—Ö—É–Ω–∫–∏ –æ–±–æ—Ö –∫–æ–º–∞–Ω–¥
    total_rounds = 10  # –ö—ñ–ª—å–∫—ñ—Å—Ç—å —Ä–∞—É–Ω–¥—ñ–≤
    round_number = 1
    game_active = True

    # –ü–æ–∫–∞–∑—É—î–º–æ –Ω–∞–∑–≤–∏ –∫–æ–º–∞–Ω–¥ —Ç–∞ —ó—Ö–Ω—ñ —Ä–∞—Ö—É–Ω–∫–∏
    scores_frame = tk.Frame(root, bg="#1e1e1e")
    scores_frame.pack(pady=20)
    
    team1_label = tk.Label(scores_frame, text=f"{teams[0]}: 0", font=("Arial", 20, "bold"), 
                          bg="#1e1e1e", fg=team_colors[0], underline=True)
    team1_label.pack(side=tk.LEFT)
    
    separator_label = tk.Label(scores_frame, text="  -  ", font=("Arial", 20, "bold"), bg="#1e1e1e", fg="white")
    separator_label.pack(side=tk.LEFT)
    
    team2_label = tk.Label(scores_frame, text=f"{teams[1]}: 0", font=("Arial", 20, "bold"), 
                          bg="#1e1e1e", fg=team_colors[1])
    team2_label.pack(side=tk.LEFT)

    # –ü–æ–∫–∞–∑—É—î–º–æ –∑–æ–±—Ä–∞–∂–µ–Ω–Ω—è –∫—É–±–∏–∫–∞ (–ø–æ—á–∞—Ç–∫–æ–≤–æ 1)
    dice_label = tk.Label(root, image=dice_images[0], bg="#1e1e1e")
    dice_label.pack()

    # –°—Ç–∞—Ç—É—Å ‚Äî —Ö—Ç–æ –∑–∞—Ä–∞–∑ –∫–∏–¥–∞—î –∫—É–±–∏–∫
    status_label = tk.Label(root, text=f"–†–∞—É–Ω–¥ {round_number}. –•—ñ–¥ {teams[round_number % 2]}", 
                           font=("Arial", 18, "bold"), bg="#1e1e1e", fg="#FFD700")
    status_label.pack(pady=10)

    btn_frame = tk.Frame(root, bg="#1e1e1e")
    btn_frame.pack(pady=20)

    def update_team_highlight():
        current_team = round_number % 2
        if current_team == 0:
            team1_label.config(underline=True)
            team2_label.config(underline=False)
        else:
            team1_label.config(underline=False)
            team2_label.config(underline=True)

    update_team_highlight()

    # –ö–Ω–æ–ø–∫–∞ –∫–∏–¥–∫–∞ –∫—É–±–∏–∫–∞
    def roll_football():
        nonlocal round_number, game_active

        if not game_active:
            return

        roll = random.randint(1, 6)
        dice_label.config(image=dice_images[roll - 1])

        # –í–∏–∑–Ω–∞—á–∞—î–º–æ, —è–∫—ñ–π –∫–æ–º–∞–Ω–¥—ñ –¥–æ–¥–∞—î–º–æ –æ—á–∫–∏ (–ø–æ —á–µ—Ä–∑—ñ)
        team_index = (round_number - 1) % 2
        team_scores[team_index] += roll

        team1_label.config(text=f"{teams[0]}: {team_scores[0]}")
        team2_label.config(text=f"{teams[1]}: {team_scores[1]}")

        # –ö—ñ–Ω–µ—Ü—å –≥—Ä–∏ –ø—ñ—Å–ª—è –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ —Ä–∞—É–Ω–¥—É
        if round_number == total_rounds:
            if team_scores[0] > team_scores[1]:
                status_label.config(text=f"üéâ {teams[0]} –≤–∏–≥—Ä–∞–ª–∞ —Ç—É—Ä–Ω—ñ—Ä!")
            elif team_scores[1] > team_scores[0]:
                status_label.config(text=f"üéâ {teams[1]} –≤–∏–≥—Ä–∞–ª–∞ —Ç—É—Ä–Ω—ñ—Ä!")
            else:
                status_label.config(text="–ù—ñ—á–∏—è! –°–ø—Ä–æ–±—É–π—Ç–µ —â–µ —Ä–∞–∑.")
            finish_football_game()
        else:
            round_number += 1
            next_team = teams[(round_number - 1) % 2]
            status_label.config(text=f"–†–∞—É–Ω–¥ {round_number}. –•—ñ–¥ {next_team}")
            update_team_highlight() 

    # –ö–Ω–æ–ø–∫–∏ "–ö–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫", "–†–µ–≤–∞–Ω—à" —Ç–∞ "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é"
    def finish_football_game():
        roll_button.config(state=tk.DISABLED)

        rematch_btn = styled_button(btn_frame, "–†–µ–≤–∞–Ω—à", lambda: start_football_mode(), bg="#607d8b", font_size=14, width=15, height=2)
        rematch_btn.pack(side=tk.LEFT, padx=10)

        newgame_btn = styled_button(btn_frame, "–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é", show_main_menu, bg="#f44336", font_size=14, width=15, height=2)
        newgame_btn.pack(side=tk.LEFT, padx=10)

    roll_button = styled_button(root, "–ö–∏–Ω—É—Ç–∏ –∫—É–±–∏–∫", roll_football, bg="#4CAF50", font_size=18, width=20, height=2)
    roll_button.pack(pady=10)

# –í—ñ–¥—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
show_main_menu()
root.mainloop()